What if have a function callback that simply returns values through json interface kinda like a json_object_get_idx method but

Can you have a JSON object that represents a real C struct in memory?
   * construct the JSON object from actual C code (DSL-like)
   * Don't need JSON object to house values, only structure
   * problem is that types are embedded in the struct definition...

typedef struct _foo_t {
    int a;
    char *b;
    double c;
    struct _gorfo_ {
        int timeidx;
        double extents[6];
    } gorfo;
} foo_t;

Equivalent JSON object is...

{
    "a":<int>,
    "b":<string>,
    "c":<double>,
    "gorfo":
    {
        "timeidx":<int>,
        "extents":<double[6]>
    }
}

This object also stores values, whats involved in just recording the struct?
What if augment it to where values are stored now, we store a pointer to a base address and then offsets in the JSON object.

Certain members relate to other members too. Similar to browser's syntax for specifying types.

Default values

Sanity checks
    * ranges
    * logical relationships
    *

Serializations
 * to hdf5 dataset, attribute
 * binary and ascii
 * across types?
 * compression

read an HDF5 file as a json object with extarr objects as datasets
write an HDF5 file from a json object. Are 'dirs' always object nodes?

json_object_mpi_type
json_object_hdf5_type
json_object_cstruct_type

Adding differencing capabiliy
For each prim. type, json_object_diff_
* json_object_diff_int
* json_object_diff_boolean
* json_object_diff_string
* json_object_diff_double
* json_object_diff_object <- this is the hard one
* difference related constants

Typing and versioning of objects
* convention in the *use* of a json_object
* The json type object is a template
* json_object_new_object_from_template()
* includes logic information regarding if key name "foo" exists then so should bar.
** This could be a function call that sanity checks the object
* includes some additional/conventional members ".silo" sub-object that indicates high-level information about the type
* url references to an object registry

Object Congruence and Conversion
{
    double xmin;
    double xmax;
    double ymin;
    double ymax;
    double zmin;
    double zmax;
}
{
    double extents[6];
}

In both cases, 6 primitives of same type, double.
But, still don't know mapping.
The default mapping is extents[0]==xmin, extents[1]==xmax, etc.
Alternatives can be characterized by permutation.

Conversions...
int->double
double->int (error for non-integral value or truncate ok)
int->char (error for overflow or truncate ok)
char->int
int32->int64 vice versa
if include notion of fixed point
