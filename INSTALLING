1. Create a file in macsio/config-site directory whose name is whatever
   string the command 'hostname -f' returns. Example...
        % hostname -f
        scratlantis
        % touch macsio/config-site/scratlantis 

2. Populate the file you created in step one with variables to
   define where various third party libraries (TPLs) for plugins
   can be found. MACSio will not attempt to build any plugins
   for which the requisite TPL variables are not defined.
   Example...
        # For the silo plugin, we need Silo and, optionally, HDF5
        SILO_HOME=/foo/bar/silo/4.10.2-h5par/i386-apple-darwin12_gcc-4.2
        HDF5_HOME=/foo/bar/hdf5/1.8.11-par/i386-apple-darwin12_gcc-4.2

        # Sometimes, HDF5 needs szip and the HDF5 plugin does szip compression
        SZIP_HOME=/foo/bar/szip/2.1/i386-apple-darwin12_gcc-4.2

        # For the Exodus plugin, we need Exodus and netCDF.
        EXODUS_HOME=/foo/bar/exodus-6.09/exodus/myinstall
        NETCDF_HOME=/foo/bar/netcdf/4.1.1/i386-apple-darwin12_mpicc

	# For the Typhonio plugin, we need to have a build of Typhonio (https://github.com/UK-MAC/typhonio)
	# which in turn must be built on top of HDF5
	TYPHONIO_HOME=/foo/bar/typhonio

3. Continue populating the file you created in step one with
   variables to control the location of C/C++ compilers, compiler
   flags, linker flags, etc. Note that a C++ compiler is used
   only to link the executables. Most of the standard GNU make
   variables are supported. Example...
        CXX=mpicxx
        CC=mpicc
        CFLAGS=-DHAVE_MPI -g
        LINK=$(CXX)
        DOXCMD=doxygen

4. Go into the macsio directory and type 'make all'. That should
   produce the 'macsio' executable. Make 'help' will give you
   some instructions on other useful make targets

5. MACSio has default values for all command-line arguments. So if you
   just run the command './macsio', it will do something but probably
   not what you want. Here are some example command-lines. . .

   To run with Multiple Independent File (MIF) mode to 8 HDF5 files. . .
       mpirun -np 93 macsio --interface hdf5 --parallel_file_mode MIF 8

   Same thing to but a Single Shared File (SIF) mode to 1 HDF5 file. . .
       mpirun -np 93 macsio --interface hdf5 --parallel_file_mode SIF 1

   Default per-proc request size is 80,0000 bytes (10K doubles). To use
   a different request size, use --part_size . . .
       mpirun -np 128 macsio --interface hdf5 --parallel_file_mode MIF 8 --part_size 10M
    . . . 'M' means either decimal Megabytes (Mb) or binary Mibibytes (Mi)
    depending on setting for --units_prefix_system. Default is binary.

   Default #parts/proc is 2, which is common for applications that support
   'domain overload' workflows. Change with --avg_num_parts <float> arg
       mpirun -np 128 macsio --interface hdf5 --parallel_file_mode MIF 8 --avg_num_parts 2.5
   means that 50% of procs have 2 parts and 50 % of procs have 3 parts.

   Default number of dumps is 10, change with --num_dumps argument. . .
       mpirun -np 128 macsio --interface hdf5 --parallel_file_mode MIF 8 --num_dumps 2

   Set various debugging levels (1,2 or 3, more info in logs with higher numbers)
       mpirun -np 128 macsio --interface hdf5 --parallel_file_mode MIF 8 --debug_level 2
   Note: debugging can degrade performance and skew timing results

   Getting more help. . .
       ./macsio --help
   Will produce a lot of help output including MACSio's main arguments as well as arguments
   specific to any enabled plugins.
